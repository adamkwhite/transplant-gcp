[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "transplant-medication-adherence"
version = "1.0.0"
description = "AI multi-agent system for transplant medication adherence using Google ADK"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Adam", email = "adam@example.com"}
]
keywords = ["ai", "adk", "google-adk", "transplant", "medication", "healthcare", "multi-agent"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
]

# Dependencies - mirror requirements.txt for now
# In the future, manage dependencies here and generate requirements.txt
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-html>=4.1.0",
    "ruff>=0.3.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/adam/transplant-gcp"
Documentation = "https://github.com/adam/transplant-gcp"
Repository = "https://github.com/adam/transplant-gcp"
Issues = "https://github.com/adam/transplant-gcp/issues"

# === RUFF CONFIGURATION ===
[tool.ruff]
line-length = 100
target-version = "py312"

exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]

[tool.ruff.lint]
# Enable pycodestyle (E), Pyflakes (F), isort (I), and other rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
]

ignore = [
    "E501",  # line too long (handled by ruff format)
    "B008",  # function calls in argument defaults
    "B905",  # zip without explicit strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py

[tool.ruff.lint.isort]
known-first-party = ["services"]

# === MYPY CONFIGURATION ===
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true for stricter typing
ignore_missing_imports = true
show_error_codes = true
exclude = [
    "venv/",
    ".venv/",
    "build/",
    "dist/",
    "services/missed-dose/",  # Legacy service directory with duplicate modules
]

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# === PYTEST CONFIGURATION ===
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=services",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--html=test-report.html",
    "--self-contained-html",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# === COVERAGE CONFIGURATION ===
[tool.coverage.run]
source = ["services"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# === BANDIT SECURITY CONFIGURATION ===
[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
    "venv",
]
skips = [
    "B101",  # assert_used - we use asserts in tests
    "B601",  # paramiko_calls - if you use paramiko
]
