name: Security Scanning

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Mondays at 9am UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:  # Allow manual triggers

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install project dependencies if they exist
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          # Always install security tools
          pip install bandit[toml] safety

      # Comprehensive Bandit scan (all severities)
      - name: Run Bandit security scan
        run: |
          bandit -r services/ \
            -f json \
            -o bandit-report.json \
            -c pyproject.toml \
            --severity-level low \
            --confidence-level low \
            || true  # Don't fail on findings, just report

      - name: Display Bandit results
        if: always()
        run: |
          if [ -f bandit-report.json ]; then
            echo "### Bandit Security Scan Results"
            python -m json.tool bandit-report.json || cat bandit-report.json
          fi

      - name: Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: bandit-security-report
          path: bandit-report.json
          retention-days: 30

      # Check dependencies for known vulnerabilities
      - name: Run Safety check on dependencies
        run: |
          safety check \
            --file requirements.txt \
            --json \
            --output safety-report.json \
            || true

      - name: Display Safety results
        if: always()
        run: |
          if [ -f safety-report.json ]; then
            echo "### Safety Dependency Scan Results"
            python -m json.tool safety-report.json || cat safety-report.json
          fi

      - name: Upload Safety results
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: safety-dependency-report
          path: safety-report.json
          retention-days: 30

      # Secret scanning (for hardcoded secrets)
      - name: Run Gitleaks secret scanner
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7 # v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # Generate security summary
      - name: Security scan summary
        if: always()
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f bandit-report.json ]; then
            HIGH_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json)
            MEDIUM_COUNT=$(jq '[.results[] | select(.issue_severity == "MEDIUM")] | length' bandit-report.json)
            LOW_COUNT=$(jq '[.results[] | select(.issue_severity == "LOW")] | length' bandit-report.json)

            echo "### üîí Bandit Results" >> $GITHUB_STEP_SUMMARY
            echo "- High severity: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Medium severity: $MEDIUM_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- Low severity: $LOW_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f safety-report.json ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            echo "### üì¶ Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "- Vulnerable packages: $VULN_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "View detailed reports in workflow artifacts" >> $GITHUB_STEP_SUMMARY

      # Fail job if high-severity issues found
      - name: Check for high-severity issues
        if: always()
        run: |
          if [ -f bandit-report.json ]; then
            HIGH_COUNT=$(jq '[.results[] | select(.issue_severity == "HIGH")] | length' bandit-report.json)
            if [ "$HIGH_COUNT" -gt 0 ]; then
              echo "‚ùå Found $HIGH_COUNT high-severity security issues"
              echo "Review the Bandit report in workflow artifacts"
              exit 1
            fi
          fi

          if [ -f safety-report.json ]; then
            VULN_COUNT=$(jq '.vulnerabilities | length' safety-report.json 2>/dev/null || echo "0")
            if [ "$VULN_COUNT" -gt 0 ]; then
              echo "‚ùå Found $VULN_COUNT vulnerable dependencies"
              echo "Review the Safety report in workflow artifacts"
              exit 1
            fi
          fi

          echo "‚úÖ No high-severity security issues found"
